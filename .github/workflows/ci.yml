name: CI-CD

on: [push, pull_request]

env:
  solution: 'src\ReportGenerator.sln'
  buildPlatform: Any CPU
  buildConfiguration: Release
  version: 5.4.11
  dotnetSDKVersion: 9.0.302
  nodeVersion: 22

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install npm
      uses: actions/setup-node@v4
      with:
        node-version: '${{ env.nodeVersion }}'

    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v2

    - name: Install dependencies
      run: msbuild .\build.proj /t:Restore
      working-directory: src

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.dotnetSDKVersion }}

    - name: Show dotnet info
      run: dotnet --info

    - name: Use NuGet 6.x
      uses: nuget/setup-nuget@v2

    - name: NuGet Restore
      run: nuget restore ${{ env.solution }}

    - name: Compile Solution
      run: msbuild '${{ env.solution }}' /p:configuration='${{ env.buildConfiguration }}' /p:platform='${{ env.buildPlatform }}'

    - name: dotnet publish Console.NetCore 8.0
      run: dotnet publish -c ${{ env.buildConfiguration }} -f net8.0 ReportGenerator.Console.NetCore.csproj
      working-directory: src/ReportGenerator.Console.NetCore

    - name: dotnet publish Console.NetCore 9.0
      run: dotnet publish -c ${{ env.buildConfiguration }} -f net9.0 ReportGenerator.Console.NetCore.csproj
      working-directory: src/ReportGenerator.Console.NetCore

    - name: dotnet publish DotnetGlobalTool 8.0
      run: dotnet publish -c ${{ env.buildConfiguration }} -f net8.0 ReportGenerator.DotnetGlobalTool.csproj
      working-directory: src/ReportGenerator.DotnetGlobalTool

    - name: dotnet publish DotnetGlobalTool 9.0
      run: dotnet publish -c ${{ env.buildConfiguration }} -f net9.0 ReportGenerator.DotnetGlobalTool.csproj
      working-directory: src/ReportGenerator.DotnetGlobalTool

    - name: Run Tests with Coverage
      run: |
        dotnet test src\ReportGenerator.Core.Test\ReportGenerator.Core.Test.csproj `
          --configuration ${{ env.buildConfiguration }} `
          --no-build `
          /p:CollectCoverage=true `
          /p:DeterministicSourcePaths=true `
          /p:IncludeTestAssembly=true `
          /p:CoverletOutputFormat=opencover%2ccobertura `
          /p:CoverletOutput=../target/reports/coverage/

    - name: Generate Coverage Report
      uses: danielpalme/ReportGenerator-GitHub-Action@v5
      with:
        reports: 'src\target\reports\coverage\coverage.opencover.xml'
        targetdir: 'src\target\reports\coverage'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges;MarkdownSummaryGithub'
        assemblyfilters: '-xunit*'
        license: '${{ secrets.REPORTGENERATOR_LICENSE }}'

    - name: Publish coverage summary
      run: cat src/target/reports/coverage/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReport
        path: src/target/reports/coverage

    # ðŸš€ SonarCloud Scan Step Added Here
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      with:
        projectBaseDir: src
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_SCANNER_OPTS: >
          -Dsonar.projectKey=sumanbdev_reportgenerator
          -Dsonar.organization=sumanbdev
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.cs.opencover.reportsPaths=target/reports/coverage/coverage.opencover.xml

    - name: Prepare ZIP release folders
      run: |
        mkdir tmpzip
        mkdir tmpzip\net47
        mkdir tmpzip\net8.0
        mkdir tmpzip\net9.0

    - name: Copy ZIP release files
      run: |
        xcopy "src\ReportGenerator.Console\bin\Release\Readme.txt" "tmpzip\"
        xcopy "src\ReportGenerator.Console\bin\Release\LICENSE.txt" "tmpzip\"
        xcopy "src\ReportGenerator.Console\bin\Release\appsettings.json" "tmpzip\net47\"
        xcopy "src\ReportGenerator.Console\bin\Release\*.dll" "tmpzip\net47"
        xcopy "src\ReportGenerator.Console\bin\Release\ReportGenerator.exe" "tmpzip\net47"
        xcopy "src\ReportGenerator.Console\bin\Release\ReportGenerator.exe.config" "tmpzip\net47"
        xcopy 'src\ReportGenerator.Console.NetCore\bin\Release\net8.0\publish\*' 'tmpzip\net8.0' /s
        xcopy 'src\ReportGenerator.Console.NetCore\bin\Release\net9.0\publish\*' 'tmpzip\net9.0' /s

    - name: Pack ZIP release
      run: Compress-Archive -Path tmpzip/* -DestinationPath src/target/packages/ReportGenerator_${{ env.Version }}.zip

    - name: NuGet pack dotnet-reportgenerator-globaltool
      run: nuget pack src/Deployment/nuget/dotnet-reportgenerator-globaltool.nuspec -OutputDirectory src/target/packages -Version ${{ env.Version }}

    - name: NuGet pack ReportGenerator.Core
      run: nuget pack src/Deployment/nuget/ReportGenerator.Core.nuspec -OutputDirectory src/target/packages -Version ${{ env.Version }}

    - name: NuGet pack ReportGenerator
      run: nuget pack src/Deployment/nuget/ReportGenerator.nuspec -OutputDirectory src/target/packages -Version ${{ env.Version }}

    - name: Chocolatey pack reportgenerator.portable
      run: .$env:USERPROFILE\.nuget\packages\chocolatey\2.2.2\tools\chocolateyInstall\choco.exe pack src/Deployment/chocolatey/reportgenerator.portable.nuspec --outputdirectory=src/target/packages --version=${{ env.Version }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        path: src/target/packages
        name: packages
