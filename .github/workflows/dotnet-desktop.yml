# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop with SonarCloud

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  Solution_Name: ReportGenerator.sln               # Replace with your .sln file
  Test_Project_Path: src/Tests/ReportGenerator.Core.Tests/ReportGenerator.Core.Tests.csproj       # Replace with test project path
  Wap_Project_Directory: src/ReportGenerator.Package         # Replace with your WAP folder
  Wap_Project_Path: src/ReportGenerator.Package/ReportGenerator.Package.wapproj  # Replace with your .wapproj path

jobs:

  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: nuget/setup-nuget@v2

    - name: Restore
      run: nuget restore $env:Solution_Name

    - name: Build
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Run Tests with Coverage
      run: |
        dotnet test $env:Test_Project_Path `
          --no-build `
          --configuration $env:Configuration `
          /p:CollectCoverage=true `
          /p:CoverletOutput=TestResults/coverage/ `
          /p:CoverletOutputFormat=cobertura
      env:
        Configuration: ${{ matrix.configuration }}

    # ⬇️ SonarCloud scan step added here
    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      with:
        projectBaseDir: .
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_SCANNER_OPTS: >
          -Dsonar.projectKey=sumanbdev_ReportGenerator
          -Dsonar.organization=sumanbdev
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.cs.opencover.reportsPaths=**/TestResults/coverage/coverage.cobertura.xml

    - name: Decode PFX Certificate
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Package App
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:AppxBundle=Always /p:AppxBundlePlatforms="x86|x64" /p:AppxPackageBuildMode=StoreUpload /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Remove PFX
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    - name: Upload MSIX Package
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages

